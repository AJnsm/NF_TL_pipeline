params{

    estimationMethod = "expectations"
    report_dir = "${launchDir}/reports"

    // These are generally overwritten by the JSON params-file:
    dataType = "agnostic"
    rawDataPath = " "
    clusterFile = " "
    userGenes = " "
    doubletFile = " "
    nGenes = 5
    nCells = 20
    clusterArray = 0
    PCalpha = 0.05
    edgeListAlpha = 0.05
    bsResamps = 1000
    twoReplicates = false

    executor = "local"
    maxQueueSize = 25

    cores_makeData = 1
    cores_PC = 1
    cores_MCMC = 1
    cores_1pt = 1
    cores_2pt = 1
    cores_3pt = 1

    mem_makeData = "4G"
    mem_PC = "4G"
    mem_MCMC = "4G"
    mem_1pt = "4G"
    mem_2pt = "4G"
    mem_3pt = "4G"

    time_makeData = "1h"
    time_PC = "1h"
    time_MCMC = "1h"
    time_1pt = "1h"
    time_2pt = "1h"
    time_3pt = "1h"
}

process{
    clusterOptions = {"-l h_vmem=${task.memory.bytes/task.cpus}"}
    executor = 'sge'
    scratch = true
    penv = "sharedmem"
    executor = 'sge'

    beforeScript = """
    . /etc/profile.d/modules.sh
    module load roslin/singularity/3.5.3
    # workaround to make non-sandbox mode work, SGE sets this variable
    # to the root user runtime directory, causing permission issues
    unset XDG_RUNTIME_DIR
    export SINGULARITY_TMPDIR="\$TMPDIR"
    """

    // The process attributes are set by anonymous function so they are only evaluated at runtime, by which time the JSON file is prioritised.

    withName: makeData { 
        cpus = "${->params.cores_makeData}"
        memory = "${->params.mem_makeData * task.attempt}"
        time = "${->params.time_makeData * task.attempt}"
        errorStrategy = { task.exitStatus in 137..140 ? 'retry' : 'terminate' }
        maxRetries = 3

    }

    withName: estimatePCgraph { 
        cpus = "${->params.cores_PC}"
        memory = "${->params.mem_PC * task.attempt}"
        time = "${->params.time_PC * task.attempt}"
        errorStrategy = { task.exitStatus in 137..140 ? 'retry' : 'terminate' }
        maxRetries = 3
    }

    withName: iterMCMCscheme {
        cpus = "${->params.cores_MCMC}"
        memory = "${->params.mem_MCMC * task.attempt}"
        time = "${->params.time_MCMC * task.attempt}"
        errorStrategy = { task.exitStatus in 137..140 ? 'retry' : 'terminate' }
        maxRetries = 3
    }


    withName: estimateCoups_1pts { 
        cpus = "${->params.cores_1pt}"
        memory = "${->params.mem_1pt * task.attempt}"
        time = "${->params.time_1pt * task.attempt}"
        errorStrategy = { task.exitStatus in 137..140 ? 'retry' : 'terminate' }
        maxRetries = 3
    }

    withName: estimateCoups_2pts { 
        cpus = "${->params.cores_2pt}"
        memory = "${->params.mem_2pt * task.attempt}"
        time = "${->params.time_2pt * task.attempt}"
        errorStrategy = { task.exitStatus in 137..140 ? 'retry' : 'terminate' }
        maxRetries = 3
    }

    withName: estimateCoups_3pts { 
        cpus = "${->params.cores_3pt}"
        memory = "${->params.mem_3pt * task.attempt}"
        time = "${->params.time_3pt * task.attempt}"
        errorStrategy = { task.exitStatus in 137..140 ? 'retry' : 'terminate' }
        maxRetries = 3
    }
}

executor {
    queueSize = "${->params.maxQueueSize}"
}

includeConfig 'singularity.config'